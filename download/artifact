#!/usr/bin/env sh
set -e

# ===========================
# Usage:
# ./artifact <DOMAIN> <PROJECT> <VERSION> <OUTPUT_PATH> [FILE_NAME]
#
# Examples:
#   Paper (automatic filename):
#     ./artifact https://api.papermc.io/v2 paper latest ./paperclip.jar
#
#   Floodgate/Geyser (explicit filename):
#     ./artifact https://download.geysermc.org/v2 floodgate latest ./plugins/floodgate.jar spigot
# ===========================

DOMAIN="$1"
PROJECT="$2"
VERSION="$3"
OUTPUT="$4"
FILE_NAME="$5"

if [ -z "$DOMAIN" ] || [ -z "$PROJECT" ] || [ -z "$VERSION" ] || [ -z "$OUTPUT" ]; then
    echo "Usage: $0 <DOMAIN> <PROJECT> <VERSION|latest> <OUTPUT_PATH> [FILE_NAME]"
    exit 1
fi

if ! command -v jq >/dev/null 2>&1; then
    echo "Error: jq is not installed."
    exit 1
fi

TMP_JSON=$(mktemp)

# ---------------------------
# Determine version if "latest"
# ---------------------------
if [ "$VERSION" = "latest" ]; then
    curl -s --retry 5 --retry-delay 2 "${DOMAIN}/projects/${PROJECT}" -o "$TMP_JSON"
    VERSION=$(jq -r '.versions[-1]' "$TMP_JSON")
    if [ -z "$VERSION" ] || [ "$VERSION" = "null" ]; then
        echo "Error: Could not determine the latest version for project '${PROJECT}'."
        rm -f "$TMP_JSON"
        exit 1
    fi
    echo "Using latest version: $VERSION"
fi

# ---------------------------
# Check if the version exists
# ---------------------------
curl -s --retry 5 --retry-delay 2 "${DOMAIN}/projects/${PROJECT}" -o "$TMP_JSON"
AVAILABLE=$(jq -r '.versions[]' "$TMP_JSON" | grep -Fx "$VERSION" || true)
if [ -z "$AVAILABLE" ]; then
    echo "Error: Version '$VERSION' for project '$PROJECT' does not exist."
    echo "Available versions:"
    jq -r '.versions[]' "$TMP_JSON"
    rm -f "$TMP_JSON"
    exit 1
fi

# ---------------------------
# Fetch builds for the version
# ---------------------------
curl -s --retry 5 --retry-delay 2 "${DOMAIN}/projects/${PROJECT}/versions/${VERSION}/builds" -o "$TMP_JSON"

# Validate JSON
jq . "$TMP_JSON" >/dev/null 2>&1 || {
    echo "Error: API did not return valid JSON. Possibly network issue or maintenance page."
    echo "Response preview:"
    head -n 20 "$TMP_JSON"
    rm -f "$TMP_JSON"
    exit 1
}

# ---------------------------
# Determine latest stable build
# ---------------------------
LATEST_BUILD=$(jq -r '
    .builds
    | map(select(.channel == "default"))
    | map(.build)
    | last
' "$TMP_JSON")

if [ -z "$LATEST_BUILD" ] || [ "$LATEST_BUILD" = "null" ]; then
    echo "Warning: No stable build found for version $VERSION."
    rm -f "$TMP_JSON"
    exit 1
fi

# ---------------------------
# Determine filename
# ---------------------------
if [ -z "$FILE_NAME" ]; then
    FILE_NAME=$(jq -r '
        .builds
        | map(select(.channel == "default"))
        | last
        | .downloads.application.name
    ' "$TMP_JSON")
    if [ -z "$FILE_NAME" ] || [ "$FILE_NAME" = "null" ]; then
        echo "Error: Could not determine download filename from API."
        rm -f "$TMP_JSON"
        exit 1
    fi
fi

DOWNLOAD_URL="${DOMAIN}/projects/${PROJECT}/versions/${VERSION}/builds/${LATEST_BUILD}/downloads/${FILE_NAME}"

# ---------------------------
# Ensure output directory exists
# ---------------------------
OUTPUT_DIR=$(dirname "$OUTPUT")
if [ ! -d "$OUTPUT_DIR" ]; then
    echo "Creating directory: $OUTPUT_DIR"
    mkdir -p "$OUTPUT_DIR"
fi

echo "Downloading:"
echo "  URL:    $DOWNLOAD_URL"
echo "  Output: $OUTPUT"

curl -L --retry 5 --retry-delay 2 -o "$OUTPUT" "$DOWNLOAD_URL"

# Verify the file is not an HTML error page
if head -c 15 "$OUTPUT" | grep -q "Not Found"; then
    echo "Error: Download failed. Possibly the build does not exist or network issue."
    rm -f "$OUTPUT"
    rm -f "$TMP_JSON"
    exit 1
fi

echo "Download completed: $OUTPUT"
rm -f "$TMP_JSON"
