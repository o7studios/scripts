#!/usr/bin/env sh
set -e

# ===========================
# Usage:
# ./artifact <DOMAIN> <PROJECT> <VERSION> <OUTPUT_PATH> [FILE_NAME]
#
# Examples:
#   Paper (automatic filename):
#     ./artifact https://api.papermc.io/v2 paper latest ./paperclip.jar
#
#   Floodgate/Geyser (explicit filename):
#     ./artifact https://download.geysermc.org/v2 floodgate latest ./plugins/floodgate.jar spigot
# ===========================

DOMAIN="$1"
PROJECT="$2"
VERSION="$3"
OUTPUT="$4"
FILE_NAME="$5"

# ---------------------------
# Validate arguments
# ---------------------------
if [ -z "$DOMAIN" ] || [ -z "$PROJECT" ] || [ -z "$VERSION" ] || [ -z "$OUTPUT" ]; then
    echo "Usage: $0 <DOMAIN> <PROJECT> <VERSION|latest> <OUTPUT_PATH> [FILE_NAME]"
    exit 1
fi

if ! command -v jq >/dev/null 2>&1; then
    echo "Error: jq is not installed."
    exit 1
fi

# ---------------------------
# Determine version if "latest"
# ---------------------------
if [ "$VERSION" = "latest" ]; then
    VERSION=$(curl -s --retry 5 --retry-delay 2 "${DOMAIN}/projects/${PROJECT}" | jq -r '.versions[-1]')
    if [ -z "$VERSION" ] || [ "$VERSION" = "null" ]; then
        echo "Error: Could not determine the latest version for project '${PROJECT}'."
        exit 1
    fi
    echo "Using latest version: $VERSION"
fi

# ---------------------------
# Check if the version exists
# ---------------------------
AVAILABLE=$(curl -s --retry 5 --retry-delay 2 "${DOMAIN}/projects/${PROJECT}" | jq -r '.versions[]' | grep -Fx "$VERSION" || true)
if [ -z "$AVAILABLE" ]; then
    echo "Error: Version '$VERSION' for project '$PROJECT' does not exist."
    echo "Available versions:"
    curl -s "${DOMAIN}/projects/${PROJECT}" | jq -r '.versions[]'
    exit 1
fi

# ---------------------------
# Fetch builds for the version
# ---------------------------
BUILDS_JSON=$(curl -s --retry 5 --retry-delay 2 "${DOMAIN}/projects/${PROJECT}/versions/${VERSION}/builds")

# Validate JSON before parsing
echo "$BUILDS_JSON" | jq . >/dev/null 2>&1 || {
    echo "Error: API did not return valid JSON. Possibly network issue or maintenance page."
    echo "Response preview:"
    echo "$BUILDS_JSON" | head -n 20
    exit 1
}

# ---------------------------
# Determine latest stable build
# ---------------------------
LATEST_BUILD=$(echo "$BUILDS_JSON" | jq -r '
  .builds
  | map(select(.channel == "default"))
  | map(.build)
  | last
')

if [ -z "$LATEST_BUILD" ] || [ "$LATEST_BUILD" = "null" ]; then
    echo "Warning: No stable build found for version $VERSION."
    exit 1
fi

# ---------------------------
# Determine filename
# ---------------------------
if [ -z "$FILE_NAME" ]; then
    # Try to use the application download name from the API (robust against line breaks)
    FILE_NAME=$(echo "$BUILDS_JSON" | jq -r '
      .builds
      | map(select(.channel == "default"))
      | last
      | .downloads.application.name
    ')
    if [ -z "$FILE_NAME" ] || [ "$FILE_NAME" = "null" ]; then
        echo "Error: Could not determine download filename from API."
        exit 1
    fi
fi

DOWNLOAD_URL="${DOMAIN}/projects/${PROJECT}/versions/${VERSION}/builds/${LATEST_BUILD}/downloads/${FILE_NAME}"

# ---------------------------
# Download the file
# ---------------------------
echo "Downloading:"
echo "  URL:    $DOWNLOAD_URL"
echo "  Output: $OUTPUT"

curl -L --retry 5 --retry-delay 2 -o "$OUTPUT" "$DOWNLOAD_URL"

# Verify the file is not an HTML error page
if head -c 15 "$OUTPUT" | grep -q "Not Found"; then
    echo "Error: Download failed. Possibly the build does not exist or network issue."
    rm -f "$OUTPUT"
    exit 1
fi

echo "Download completed: $OUTPUT"
