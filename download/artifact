#!/usr/bin/env sh
set -e

# ===========================
# Usage:
# ./artifact <DOMAIN> <PROJECT> <VERSION> <OUTPUT_PATH> [FILE_NAME]
#
# Examples:
#   Paper (automatic filename):
#     ./artifact https://api.papermc.io/v2 paper latest ./paperclip.jar
#
#   Floodgate/Geyser (explicit filename):
#     ./artifact https://download.geysermc.org/v2 floodgate latest ./plugins/floodgate.jar spigot
# ===========================

DOMAIN="$1"
PROJECT="$2"
VERSION="$3"
OUTPUT="$4"
FILE_NAME="$5"

if [ -z "$DOMAIN" ] || [ -z "$PROJECT" ] || [ -z "$VERSION" ] || [ -z "$OUTPUT" ]; then
    echo "Usage: $0 <DOMAIN> <PROJECT> <VERSION|latest> <OUTPUT_PATH> [FILE_NAME]"
    exit 1
fi

if ! command -v jq >/dev/null 2>&1; then
    echo "Error: jq is not installed."
    exit 1
fi

# ===========================
# Determine version if "latest"
# ===========================
if [ "$VERSION" = "latest" ]; then
    VERSION=$(curl -s "${DOMAIN}/projects/${PROJECT}" | jq -r '.versions[-1]')
    if [ -z "$VERSION" ] || [ "$VERSION" = "null" ]; then
        echo "Error: Could not determine the latest version for project '${PROJECT}'."
        exit 1
    fi
    echo "Using latest version: $VERSION"
fi

# ===========================
# Check if the version exists
# ===========================
AVAILABLE=$(curl -s "${DOMAIN}/projects/${PROJECT}" | jq -r '.versions[]' | grep -Fx "$VERSION" || true)
if [ -z "$AVAILABLE" ]; then
    echo "Error: Version '$VERSION' for project '$PROJECT' does not exist."
    echo "Available versions:"
    curl -s "${DOMAIN}/projects/${PROJECT}" | jq -r '.versions[]'
    exit 1
fi

# ===========================
# Fetch builds for the version
# ===========================
BUILDS_JSON=$(curl -s "${DOMAIN}/projects/${PROJECT}/versions/${VERSION}/builds")

LATEST_BUILD=$(echo "$BUILDS_JSON" | jq -r '.builds | map(select(.channel == "default") | .build) | .[-1]')

if [ -z "$LATEST_BUILD" ] || [ "$LATEST_BUILD" = "null" ]; then
    echo "Warning: No stable build found for version $VERSION."
    exit 1
fi

# ===========================
# Determine filename
# ===========================
if [ -z "$FILE_NAME" ]; then
    # Default format for Paper projects
    FILE_NAME="${PROJECT}-${VERSION}-${LATEST_BUILD}.jar"
fi

DOWNLOAD_URL="${DOMAIN}/projects/${PROJECT}/versions/${VERSION}/builds/${LATEST_BUILD}/downloads/${FILE_NAME}"

echo "Downloading:"
echo "  URL:    $DOWNLOAD_URL"
echo "  Output: $OUTPUT"

curl -L -o "$OUTPUT" "$DOWNLOAD_URL"

echo "Download completed: $OUTPUT"
